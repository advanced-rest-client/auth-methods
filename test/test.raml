#%RAML 1.0
title: My super cool, example API
version: v1
baseUri: http://api.domain.com/

securitySchemes:
  oauth2:
    type: OAuth 2.0
    description: Test OAuth2
    describedBy:
      headers:
        Authorization:
          example: Barer 1234
    settings:
      accessTokenUri: https://domain.com/access-token
      authorizationUri: https://domain.com/auth
      authorizationGrants:  [authorization_code, client_credentials, implicit]
      scopes: [profile]
  x-test1:
    description: |
      A custom security scheme for authenticating requests.
    type: x-custom
    describedBy:
      headers:
        SpecialToken:
          description: |
            Used to send a custom token.
          type: string
      queryParameters:
        debugToken:
          description: Select one of available values to run the request in the debug mode with selected level.
          enum: [Info, Log, Warning, Error, Critical]
          type: string
          required: false
        booleanToken:
          description: Just to test boolean values.
          type: boolean
          default: true
      responses:
        401:
          description: |
            Bad token.
        403:
  x-other:
    description: |
      Other custom security method for authorization.
    type: x-custom
    describedBy:
      queryParameters:
        apiUserId:
          description: |
            Your api user ID. Some imaginary value.
          type: number
          required: true
        apiNonce:
          description: Random string
          type: string
      responses:
        401:
          description: |
            Bad token autorization.
          body:
            application/json:
              type: object
              properties:
                error:
                  type: boolean
                  description: Always true. Indicates that the response is errord.
                message:
                  type: string
                  description: Human readable message describing the error.

/endpointA:
  get:
    securedBy: [x-test1]
/endpointB:
  get:
    securedBy: [x-other]
/endpointC:
  get:
    securedBy: [x-other, x-test1]
